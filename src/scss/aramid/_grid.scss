/******************************************************************************
 * GRID
 ******************************************************************************/

///////////////////////////////////////////////////////////////////////////////
// DEFAULT CONFIGURATION

$prefix:                  "" !default;
$gutter:                  2.4rem !default;
$breakpoints: 						('s': 44em) !default;

$responsive-grid:					true !default;
$auto-cell:								true !default;

$generate-classes:				true !default;
$n-children-max:          12 !default;
$classname-cell: 	        "cell" !default;
$classname-grid:   		    "grid" !default;


///////////////////////////////////////////////////////////////////////////////
// PLACEHOLDERS

// Grid

%grid {										display: flex; flex-wrap: wrap; }
%grid--vertical {					flex-direction: column; }

%grid--top {							align-items: flex-start; }
%grid--middle {						align-items: center; }
%grid--bottom {						align-items: flex-end; }
%grid--left {							justify-content: flex-start; }
%grid--center {						justify-content: center; }
%grid--right {						justify-content: flex-end; }

%grid--gutter {						margin: -$gutter (-$gutter / 2) 0; }
%grid--outer-gutter {			padding: $gutter;}

// Cell

%cell {										flex: 1; }

%cell--top {							align-self: flex-start; }
%cell--middle {						align-self: center; }
%cell--bottom {						align-self: flex-end; }

%cell--fit {							flex: none; }
%cell--fill {							flex: 1; }
%cell--full {							flex: 0 0 100%; }

%cell--gutter {						border-left: ($gutter / 2) solid transparent;
													border-right: ($gutter / 2) solid transparent;
													border-top: $gutter solid transparent;
													background-clip: padding-box; /* no background on border */
}


///////////////////////////////////////////////////////////////////////////////
// FUNCTIONS

// How many % is one seventh ? or three fifth ?

@function fraktion($t, $f: 1) {
	@if $t > 0 {
			@return (100% * $f / $t);

		} @else {
			@warn "Fraction denominator must be an integer greater than zero.";
		}
}


///////////////////////////////////////////////////////////////////////////////
// MIXINS

// Variables

// Auto-cell selector
$cell-selector: "*";	// By default, all direct children of .grid are .cell's (implicit)
@if not $auto-cell {	$cell-selector: ".#{$prefix}#{$classname-cell}"; }


// Cell

@mixin cell($mods: "") {

	@each $mod in $mods {

		@if 		$mod == "" { 									@extend %cell; }
		@elseif $mod == "gutter" { 						@extend %cell--gutter; }
		@elseif $mod == "top" { 							@extend %cell--top; }
		@elseif $mod == "middle" { 						@extend %cell--middle; }
		@elseif $mod == "bottom" { 						@extend %cell--bottom; }
		@elseif $mod == "fit" { 							@extend %cell--fit; }	
		@elseif $mod == "fill" { 							@extend %cell--fill; }
		@elseif $mod == "full" { 							@extend %cell--full;	}	
		@else {

			@for $i from 2 through $n-children-max {
				@for $j from 1 through ($i - 1) {

					@if $mod == "#{$j}of#{$i}" {		@include cellSize($i, $j); }
				}
			}

			//@warn "Unknown modifier `#{$mod}` for mixin `cell`.";
		}
	}
}

@mixin cellSize($total, $size: 1) {

	flex: 0 0;
	flex-basis: fraktion($total, $size);
}

// Grid

@mixin grid($mods: "") {

	@each $mod in $mods {
		@if 		$mod == "" {									@extend %grid;
																					& > #{$cell-selector} { @include cell(); } }
		@elseif $mod == "gutter" {						@extend %grid--gutter;
																					& > #{$cell-selector} { @include cell("gutter"); } }

		@elseif $mod == "fit" { 							& > #{$cell-selector} {	@include cell("fit"); } }
		@elseif $mod == "fill" { 							& > #{$cell-selector}	{ @include cell("fill"); } }
		@elseif $mod == "full" { 							& > #{$cell-selector} {	@include cell("full"); } }
		@elseif $mod == "responsive" { 				& > #{$cell-selector} {	@include cell("full"); } } // copy

		@elseif $mod == "vertical" {					@extend %grid--vertical; }
		@elseif $mod == "outer-gutter" {			@extend %grid--outer-gutter; }

		@elseif $mod == "top" { 							@extend %grid--top; }
		@elseif $mod == "middle" { 						@extend %grid--middle; }
		@elseif $mod == "bottom" { 						@extend %grid--bottom; }
		@elseif $mod == "left" { 							@extend %grid--left; }
		@elseif $mod == "center" { 						@extend %grid--center; }
		@elseif $mod == "right" { 						@extend %grid--right; }

		@else {

			@for $i from 2 through $n-children-max {
				@if $mod == "#{$i}" {							& > #{$cell-selector} {	@include cellSize($i); } }
			}

//			@warn "Unknown modifier `#{$mod}` for mixin `grid`.";
		}
	}
}


///////////////////////////////////////////////////////////////////////////////
// CLASSES

@if $generate-classes {

	// Cell

	$mods: "top", "middle", "bottom", "fit", "fill", "full";

	.#{$prefix}#{$classname-cell} {										@include cell(); }

	@each $mod in $mods {
		.#{$prefix}#{$classname-cell}--#{$mod} {        @include cell($mod); }
	}

	
	// Grid

	$mods: "vertical", "gutter", "outer-gutter", "top", "middle", "bottom",
					"left", "center", "right", "fit", "fill", "full";

	.#{$prefix}#{$classname-grid} { 									@include grid(); }

	@each $mod in $mods {
		.#{$prefix}#{$classname-grid}--#{$mod} {        @include grid($mod); }
	}

	// allows correct vertical rythm between grids
	// TODO : not doable with mixins ? /!\
	.#{$prefix}#{$classname-grid} + .#{$prefix}#{$classname-grid} {
		padding-top: $gutter; }


	// Static size

	@for $i from 2 through $n-children-max {
		.#{$prefix}#{$classname-grid}--#{$i} {					@include grid("#{$i}"); }

		@for $j from 1 through ($i - 1) {
			.#{$prefix}#{$classname-cell}--#{$j}of#{$i} {	@include cell("#{$j}of#{$i}"); }
		}
	}


	// Responsive

	@if $responsive-grid {

		@if $debug { .debug::before { content: ("MQ: min") } }
		
		.#{$prefix}#{$classname-grid}--responsive {  		@include grid("responsive"); }

		@each $breakpoint-name, $breakpoint-width in $breakpoints {

			@media (min-width: $breakpoint-width) {

				@for $i from 2 through $n-children-max {
					.#{$prefix}#{$classname-grid}--#{$breakpoint-name}-#{$i} {
						@include grid("#{$i}");
					}

					@for $j from 1 through ($i - 1) {
						.#{$prefix}#{$classname-cell}--#{$breakpoint-name}-#{$j}of#{$i} {
							@include cell("#{$j}of#{$i}");
						}
					}
				}

				@if $debug { .debug::before { content: ('MQ: ' + $breakpoint-name + ' (' + bp($breakpoint-name) + ')'); } }
			}

		}

	}	// end of responsive-grids

} // end of generate-classes


	
///////////////////////////////////////////////////////////////////////////////
// Common styles


ul.grid,
ol.grid {
	margin: 0;
	padding-left: 0;

	li { list-style-type: none; }
}