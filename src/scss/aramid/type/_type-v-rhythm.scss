@if module('type-v-rhythm') {
// requires: CORE ($debug, $generate-classes, $fontsize-base, $lineheight-base, $pixels-per-rem, $gutter)
// uses: _type.scss (fontsize())

/**************************************************************************
 * TYPE - VERTICAL RHYTHM
 *************************************************************************/


///////////////////////////////////////////////////////////////////////////
// CONFIGURATION

$rhythm-base:                   $gutter !default;

$vrhythm-baseline-mode:         true; // Enables baseline sticky text
$vrhythm-autocompact-lineheight:1.75; // Min lineheight before halfing it

// Debug vars
$debug-vrhythm-bg:              false !default; // draw debug background
$debug-vrhythm-bg-selector:     ".wrap:not(.wrap--content)" !default;	// selects bg-debugged elements
$debug-vrhythm-bg-type:         "stripes" !default; // "lines" or "stripes"
$debug-vrhythm-bg-color:        rgba(127, 0, 0, 0.125) !default;

$debug-vrhythm-block:           false !default; // draw debug background
$debug-vrhythm-block-color:     rgba(0, 0, 255, 0.125) !default;


///////////////////////////////////////////////////////////////////////////
// MIXINS

// Source: https://www.smashingmagazine.com/2012/12/css-baseline-the-good-the-bad-and-the-ugly/

// TODO: accept named sizes too (like "bigger")

/// @param {Number} $fontsize - The desired font-size (in px but W/O unit!)
/// @param {Number} $rhythm-base - Rhythm unit before subdivisions
@mixin v-rhythm(
	$fontsize: rem2n($fontsize-base * $pixels-per-rem),
	$rhythm-base: $rhythm-base,

	$scale: 1,
	$compact: "auto",
	$baseline-mode: $vrhythm-baseline-mode
) {

	// FONTSIZE
	// Convert unitless (px) into rem
  $fontsize: (n2rem($fontsize / $pixels-per-rem));

	// RHYTHM
	// Base vertical unit (in rem)
	// $scale can subdivide the rhythm
	$rhythm: $rhythm-base / $scale;

	// LINES
	// number of rhythm units that can fit the font-size
	$lines: ceil(($fontsize + 0.0001rem) / $rhythm);


	// LINEHEIGHT
	// calculate the new line-height
	$lineheight: $rhythm * $lines / $fontsize;


	// COMPACT MODE
	// compact mode is basically about halving the lineheight
	// works best on capitalized text

	// Auto compact mode
	@if $compact == "auto" {

		// we can fit two text lines into one rhythm unit
		// and the lineheight is above user-defined threshold
		@if (
			$lineheight * $fontsize >= $rhythm * 2)
			and
			($lineheight >= $vrhythm-autocompact-lineheight )
		{
			$lineheight: $lineheight / 2;
		}

		// Manual compact mode
		// user can force the API to use compact mode
	} @elseif $compact {
		$lineheight: $lineheight / 2;
	}


	// OUTPUT STUFF
	// Basic vertical rhythm only involves lineheight tweaking (and font-size)
	font-size: $fontsize;
	line-height: $lineheight;


	// Baseline mode
	@if $baseline-mode {
		@include v-baseline(
			$fontsize,
			$lineheight
		);
	}

	// Debug blocks
	@if $debug-vrhythm-block {
		background-color: $debug-vrhythm-block-color;
	}

} // End @mixin v-rhythm()


// BLACK MAGIC BASELINE

/// @param {Number} $fontsize - in
/// @param {Number} $lineheight - in
/// @param {Number} $fontsize - in
@mixin v-baseline(
	$fontsize,
	$lineheight,

	$cap-height: 0.70
) {

	// BASELINE DISTANCE
	// calculate the padding pushing the text on the baseline
	// This value depends on typeface, thus the $cap-height ratio
	$baseline-distance: ($lineheight - $cap-height) * $fontsize / 2;

	// BOTTOM FILL
	// As we put padding at the top, text is now lower.
	// So se must fill the gap with bottom margin
	$bottom-fill: $rhythm-base - (2 * $baseline-distance);

	padding-top: $baseline-distance;
	padding-bottom: $baseline-distance + $bottom-fill;

	margin-bottom: 0; // TODO : only needed for buttons?!

	// Debug blocks padding
	@if $debug-vrhythm-block {
		box-shadow:
			inset 0 $baseline-distance 0 0 adjust-hue($debug-vrhythm-block-color, 30deg),
			inset 0 (-$baseline-distance - $bottom-fill) 0 0 adjust-hue($debug-vrhythm-block-color, -30deg);
	}

} // End @mixin v-baseline()


///////////////////////////////////////////////////////////////////////////////
// PLACEHOLDERS

%vrhythm--bg-debug {

	@if $debug {

		@if $debug-vrhythm-bg-type == "lines" {

			// Line at bottom
			background-image: repeating-linear-gradient( 0deg,
				$debug-vrhythm-bg-color,
				$debug-vrhythm-bg-color 1px,
				transparent 1px,
				transparent
			);

			background-size: 100% $gutter;
		}

		@elseif $debug-vrhythm-bg-type == "stripes" {

			// Even stripes
			background-image: repeating-linear-gradient( 0deg,
			$debug-vrhythm-bg-color,
			$debug-vrhythm-bg-color $gutter,
			transparent $gutter,
			transparent
			);

			background-size: 100% $gutter-double;
		}

  }
}


///////////////////////////////////////////////////////////////////////////////
// CLASSES

@if $generate-classes {

	// TAGS DEEP OVERRIDE
	p,
	blockquote,
	ul, ol,
	input, label, textarea {
		@include v-rhythm();
	}

	// RHYTHMED FONTSIZES
	@if module('type') {

		h1, .h1 {       @include v-rhythm(fontsize("huge")); }
		h2, .h2 {       @include v-rhythm(fontsize("biggest")); }
		h3, .h3 {       @include v-rhythm(fontsize("bigger"), $compact: true); }
		h4, .h4 {       @include v-rhythm(fontsize("big")); }
		h5, .h5 {       @include v-rhythm(fontsize("base")); }
		h6, .h6 {       @include v-rhythm(fontsize("small")); }

		.smaller-text { @include v-rhythm(fontsize("smaller")); }
		.small-text {   @include v-rhythm(fontsize("small")); }
		.big-text {     @include v-rhythm(fontsize("big")); }
		.bigger-text {  @include v-rhythm(fontsize("bigger"), $compact: true); }
		.biggest-text { @include v-rhythm(fontsize("biggest")); }
		.huge-text {    @include v-rhythm(fontsize("huge")); }
		.giant-text {   @include v-rhythm(fontsize("giant")); }
		.insane-text {  @include v-rhythm(fontsize("insane")); }
	}

	// DEBUG
	.vrhythm-bg-debug,
	#{$debug-vrhythm-bg-selector} {
		@extend %vrhythm--bg-debug;
	}

}

} /* END Module */
