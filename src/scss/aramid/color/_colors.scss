@if module('colors') {

/******************************************************************************
 * COLORS
 ******************************************************************************/


///////////////////////////////////////////////////////////////////////////////
// DEFAULT CONFIGURATION

$prefix:                  "" !default;
$generate-classes:        true !default;


$colors: (
  'primary':                           #248,
  'secondary':                         #f80,
  'ternary':                           #844
) !default;

$color-variants: (
'darkest':                             (20%,   black),
'darker':                              (35%,   black),
'dark':                                (80%,   black),
'normal':                              (100%,  red),
'light':                               (80%,   white),
'lighter':                             (35%,   white),
'lightest':                            (7%,    white),
) !default;


///////////////////////////////////////////////////////////////////////////////
// FUNCTIONS

// Almighty color function

@function color(
   $color: "primary",
   $variation: "normal",
   $colorname: ""
) {

  $c: inherit;
  $bw: "transparent";
  $mix: 100%;

  @if $colorname != "" {
    // TODO: all-in-one mode: color("primary-dark") and parse/split params
    // $colorname-parts: split-string($colorname, '-');
    // @warn "[COLORNAME] " + nth($colorname-parts, 1);

  } @else {
    $ci: nth($color, 1);            // ex: 'primary'
    $vi: nth($variation, 1);        // ex: 'darker'
    $c: get-color($color);          // ex: '#ff8000'
    $v: get-variation($variation);  // ex: (35%; black)

    $bw: nth($v, 2);                // ex: black
    $mix: nth($v, 1);                // ex: 35%
  }

  $col: mix($c, $bw, $mix);
  @return $col;

  // @warn "[COLOR: $" + $ci + "-" + $vi + "]" +
  //       " - MIX( " + $c + "/" + $bw + "/" + $v2 + " )" +
  //       " - COL: " + $col +
  //       "";
}

// Get a named color from the palette
@function get-color($color) {
  @return map-get($colors, $color);
}

// Get a variation ratio
@function get-variation($variation: "normal") {
  $v: nth($variation, 1);
  @return map-get($color-variants, $v);
}


///////////////////////////////////////////////////////////////////////////////
// MIXINS

@mixin color($color: "primary", $variation: "normal") {
  color: color($color, $variation);
}

@mixin background-color($color: "primary", $variation: "normal") {
  background-color: color($color, $variation);
}


///////////////////////////////////////////////////////////////////////////////
// VARIABLES


///////////////////////////////////////////////////////////////////////////////
// PLACEHOLDERS


///////////////////////////////////////////////////////////////////////////////
// CLASSES

@if $generate-classes {

  @each $color in $colors {
    $ci: nth($color, 1);              // ex: 'primary'

    @each $variant in $color-variants {
      $vi: nth($variant, 1);          // ex: 'darker'

      $colorname: $ci + "-" + $vi;    // ex: 'primary-darker'
      $col: color($ci, $vi);          // ex: '#804000'

      /* #{$colorname} */
      // ex: .color-ternary-light
      #{$prefix}.color-#{$colorname} {          color: $col; }
      // ex: .bg-primary-darkest
      #{$prefix}.bg-#{$colorname} {             background-color: $col; }

      // @warn $colorname + " - " + $col;
    }
  }

}

} /* END Module */
